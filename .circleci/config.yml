# iOS CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/ios-migrating-from-1-2/ for more details
#
version: 2.1

commands:
  early_return_for_forked_prs:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: skip left steps and return immediately from current job if current build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  update_brew:
    description: >-
      Update Homebrew
    steps:
      - run:
          name: Update Homebrew
          command: |
            HOMEBREW_LOGS=~/homebrew-logs
            HOMEBREW_TEMP=~/homebrew-temp
            brew update

  set_environment_variables:
    description: >-
      Set environment variables
    steps:
      - run:
          name: Set environment variables
          command: |
            sdkName=aws-ios-sdk
            echo "export sdkName=$sdkName" >> $BASH_ENV

            release_bucket=${S3_RELEASE_BUCKET}
            echo "export release_bucket=$release_bucket" >> $BASH_ENV

            release_tag=${CIRCLE_TAG}
            echo "export release_tag=$release_tag" >> $BASH_ENV

            release_version=${CIRCLE_TAG}
            echo "export release_version=$release_version" >> $BASH_ENV

            sdkNameWithVersion="$sdkName-$release_version"
            echo "export sdkNameWithVersion=$sdkNameWithVersion" >> $BASH_ENV

            pre_name=$(echo "${CIRCLE_SHA1}" | cut -c1-7)
            override_test_variable_name=OVERRIDE_TEST_${pre_name}
            echo "export override_test_variable_name=$override_test_variable_name" >> $BASH_ENV

  quit_for_nominorversion:
    description: >-
      If current release is not a minor version bump, stop executing the current job and return success.
    steps:
      - run:
          name: Skip remaining steps if current release is not a minor version bump
          command: |
            echo $release_version
            maintenance=$(echo $release_version | sed "s/[0-9]*.[0-9]*.\([0-9]*\)/\1/")
            echo $maintenance
            if [ "$maintenance" != "0" ]; then
              echo "This is not minor version bump release, so marking this step successful"
              circleci step halt
            fi

  bump_version_pre:
    description: >-
      Prepare bump version
    steps:
      - run:
          name: Checkout repository for bump version
          command: |
            if [ -z "$target_branch" ]
            then
              target_branch="main"
            fi

            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git clone "https://github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git"
            cd ${bumpversion_repo_name}
            git fetch
            branches=$(git branch)
            if [[ $branches == *"bump_version"* ]]; then
              echo "the branch is already pesent"
              git checkout bump_version
            else
              echo "create new branch bump_version"
              git checkout -b bump_version
            fi
            git remote add upstream https://github.com/${bumpversion_repo_user}/${bumpversion_repo_name}
            git remote -v
            git fetch upstream
            git reset --hard upstream/$target_branch
            echo "push update the branch"
            git push --force -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git

  bump_version_post:
    description: >-
      Check in bump version change
    steps:
      - run:
          name: Stage changes
          command: |
            cd ${bumpversion_repo_name}
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            gitstatus=$(git status)
            echo $gitstatus
            if [[ $gitstatus == *"Changes not staged for commit:"* ]]; then
              git add .
            else
              echo "No changes for sample application bump version"
              circleci step halt
            fi
      - run:
          name: Check in changes
          command: |
            if [ -z "$target_branch" ]
            then
              target_branch="main"
            fi
            cd ${bumpversion_repo_name}
            git status
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git commit -m "${bump_version_message}"
            git push --force -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git
            title="${bump_version_pr_title}"
            content="${bump_version_message}"
            echo "title:$title"
            echo "content:$content"
            python3 ../CircleciScripts/create_pullrequest.py "${GITHUB_BUMPVERSION_USER}" "${GITHUB_BUMPVERSION_TOKEN}" "$title" "$content" "$target_branch" "${GITHUB_BUMPVERSION_USER}:bump_version" ${bumpversion_repo_user} ${bumpversion_repo_name}

  configure_aws:
    description: >-
      Install aws cli and configure android aws release profile
    steps:
      - run:
          name: Install AWS cli
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli
      - run:
          name: Configure AWS profiles
          command: |
            aws configure --profile sdk_s3_release set region us-east-1
            echo -e "[sdk_s3_release]\naws_access_key_id=${S3_RELEASE_AWS_ACCESS_KEY_ID}\naws_secret_access_key=${S3_RELEASE_AWS_SECRET_ACCESS_KEY}\n" >> ~/.aws/credentials

  pre_start_simulator:
    description: >-
      Pre-start iOS Simulator, as the build may fail if it takes too long to start up during that step
    steps:
      - run:
          name: Pre-start iOS Simulator
          command: |
            bash CircleciScripts/pre_start_simulator.sh

  skip_test_job:
    description: >-
      Check if the test job can be skipped
    steps:
      - run:
          name: Skip the test job if commit message require skipping tests
          command: |
            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            if [[ "$commitmessage" =~ .*"[skip test]".* ]]
            then
               echo "skip the test job required from commit message"
               circleci step halt
            fi
      - run:
          name: Skip the test job if the release process was triggered by CircleCI
          command: |
            skipflag=$(echo "${SKIPTEST_FOR_RELEASE}") | tr '[:upper:]' '[:lower:]'
            if ! [ -z "${CIRCLE_TAG}" ] && [ "$skipflag" == "true" ]
            then
              tagmessage="git show ${CIRCLE_TAG}"
              echo $tagmessage
              if [[ "$tagmessage" =~ .*"Trigger release from circleci".* ]]
              then
                 echo "The release was triggered by CircleCI. Skip the job"
                 circleci step halt
              fi
            fi
      - run:
          name: Skip the test job if this was merged from develop by CircleCI
          command: |
            skipflag=$(echo "${SKIPTEST_FOR_MAIN}") | tr '[:upper:]' '[:lower:]'
            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            if [ "$skipflag" == "true" ] && [[ "$commitmessage" =~ .*"[Merge develop to main by circleci]".* ]]
            then
               echo "This is merged from develop by CircleCI. Skip the test job"
               circleci step halt
            fi

  skip_job_unless_required:
    description: >-
      Skip job unless required
    steps:
      - run:
          name: Skip job if SKIP_JOB flag is set
          command: |
              variable_name=SKIP_JOB_${CIRCLE_JOB}
              skipjob_flag=$(eval "echo $"${variable_name}"")
              skipjob_flag=$(echo "${skipjob_flag}" | tr '[:upper:]' '[:lower:]')
              if [ "${skipjob_flag}" == "true" ]
              then
                echo "Skipping current job as ${variable_name} environment variable is set"
                circleci step halt
              fi

  build_for_testing:
    parameters:
      project:
        type: string
      scheme:
        type: string
    steps:
      # This will restore cached values for dynamically generated resources
      # like testconfiguration.json, but it will be overwritten in the 'build'
      # step with fresh values
      - restore_cache:
          keys:
            - v1-testing-derived-data-<< parameters.scheme >>-{{ .Revision }}
      - run:
          name: Build << parameters.scheme >> for testing
          command: xcodebuild build-for-testing -project << parameters.project >> -scheme << parameters.scheme >> -sdk iphonesimulator -destination "${destination}" -derivedDataPath ./testing_derived_data | tee "artifacts/build-<< parameters.scheme >>.log" | xcpretty
      - save_cache:
          key: v1-testing-derived-data-<< parameters.scheme >>-{{ .Revision }}
          paths:
            - testing_derived_data

  make_artifacts_directory:
    steps:
      - run:
          name: Make artifacts directory
          command: mkdir -p "artifacts"

  upload_artifacts:
    steps:
      - store_artifacts:
          path: artifacts

jobs:
  build:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Git GC
          command: git gc
      - save_cache:
          key: v1-source-{{ .Revision }}
          paths:
            - ".git"
      - set_environment_variables
      - pre_start_simulator
      - make_artifacts_directory
      - run:
          name: Build sdk
          command: |
            xcodebuild build -project AWSiOSSDKv2.xcodeproj -scheme AWSAllTests -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-AWSiOSSDKv2.log" | xcpretty
            xcodebuild build -project AWSAuthSDK/AWSAuthSDK.xcodeproj -scheme AWSAuthSDKAllTargets -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-AWSAuthSDK.log" | xcpretty
      - upload_artifacts

  build_test_host_apps:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - set_environment_variables
      - pre_start_simulator
      - make_artifacts_directory
      - build_for_testing:
          project: AWSiOSSDKv2.xcodeproj
          scheme: AWSAllTestsHost
      - build_for_testing:
          project: AWSAuthSDK/AWSAuthSDK.xcodeproj
          scheme: AWSAuthSDKTestApp
      - upload_artifacts

  unit_test:
    macos:
      xcode: "12.0.0"
    parameters:
      project:
        default: "AWSiOSSDKv2.xcodeproj"
        type: string
      scheme:
        type: string
    description: Run non-integration tests for << parameters.scheme >>
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - set_environment_variables
      - pre_start_simulator
      - make_artifacts_directory

      - when:
          condition:
            equal: [ << parameters.project >>, "AWSAuthSDK/AWSAuthSDK.xcodeproj" ]
          steps:
            - restore_cache:
                key: v1-testing-derived-data-AWSAuthSDKTestApp-{{ .Revision }}

      - restore_cache:
          key: v1-testing-derived-data-AWSAllTestsHost-{{ .Revision }}

      # After this step, the cache key
      # 'v1-testing-derived-data-<< parameters.scheme >>-{{ .Revision }}'
      # will include derived data for both
      # the specified scheme AND AWSAllTestsHost (and AWSAuthSDKTestApp if the
      # project is AWSAuthSDK)
      - build_for_testing:
          project: << parameters.project >>
          scheme: << parameters.scheme >>
      - run:
          name: Unit test << parameters.scheme >>
          command: |
            xcodebuild test-without-building -project << parameters.project >> -scheme << parameters.scheme >> -sdk iphonesimulator -destination "${destination}" -derivedDataPath ./testing_derived_data -only-testing:"<< parameters.scheme >>UnitTests" | tee "artifacts/unit-test-<< parameters.scheme >>.log" | xcpretty --simple --color --report junit

      # Run additional configuration unit tests for AWSCore
      - when:
          condition:
            equal: [ << parameters.scheme >>, "AWSCore" ]
          steps:
            - run:
                name: Test additional AWSCore unit test targets
                command: |
                  xcodebuild test-without-building -project << parameters.project >> -scheme << parameters.scheme >> -sdk iphonesimulator -destination "${destination}" -derivedDataPath ./testing_derived_data -only-testing:AWSCoreServiceConfigurationTest -only-testing:AWSCoreConfigurationTest | tee "artifacts/unit-test-AWSCore-additional-config-tests.log" | xcpretty --simple --color --report junit

      - store_test_results:
          path: build/reports
      - upload_artifacts

  pre_integrationtest:
    macos:
      xcode: "12.0.0"
    environment:
      TERM: xterm-256color
    steps:
      - skip_job_unless_required
      - set_environment_variables
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - set_environment_variables
      - run:
          name: Generate testconfiguration.json
          command: bash Scripts/generate-test-config.sh -p ios -v
      - pre_start_simulator
      - restore_cache:
          key: all_tests_host_testing_derived_data-{{ .Revision }}
      - run:
          name: Build SDK
          command: |
            xcodebuild build-for-testing -project AWSiOSSDKv2.xcodeproj -scheme AWSAllTests -sdk iphonesimulator -destination "${destination}" -derivedDataPath ./testing_derived_data
            xcodebuild build-for-testing -project AWSAuthSDK/AWSAuthSDK.xcodeproj -scheme AWSMobileClient -sdk iphonesimulator -destination "${destination}" -derivedDataPath ./testing_derived_data/AWSAuthSDK
      - save_cache:
          key: testing_derived_data-{{ .Revision }}
          paths:
            - testing_derived_data

  post_integrationtest:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          key: test_result-{{ .Revision }}-AWSMobileClient
      - restore_cache:
          key: test_result-{{ .Revision }}-AutoScaling
      - restore_cache:
          key: test_result-{{ .Revision }}-CloudWatch
      - restore_cache:
          key: test_result-{{ .Revision }}-Cognito
      - restore_cache:
          key: test_result-{{ .Revision }}-Comprehend
      - restore_cache:
          key: test_result-{{ .Revision }}-Core
      - restore_cache:
          key: test_result-{{ .Revision }}-DynamoDB
      - restore_cache:
          key: test_result-{{ .Revision }}-EC2
      - restore_cache:
          key: test_result-{{ .Revision }}-ElasticLoadBalancing
      - restore_cache:
          key: test_result-{{ .Revision }}-IoT
      - restore_cache:
          key: test_result-{{ .Revision }}-KMS
      - restore_cache:
          key: test_result-{{ .Revision }}-Kinesis
      - restore_cache:
          key: test_result-{{ .Revision }}-KinesisVideoSignaling
      - restore_cache:
          key: test_result-{{ .Revision }}-Lambda
      - restore_cache:
          key: test_result-{{ .Revision }}-Lex
      - restore_cache:
          key: test_result-{{ .Revision }}-MobileAnalytics
      - restore_cache:
          key: test_result-{{ .Revision }}-Pinpoint
      - restore_cache:
          key: test_result-{{ .Revision }}-Polly
      - restore_cache:
          key: test_result-{{ .Revision }}-Rekognition
      - restore_cache:
          key: test_result-{{ .Revision }}-S3
      - restore_cache:
          key: test_result-{{ .Revision }}-SES
      - restore_cache:
          key: test_result-{{ .Revision }}-SNS
      - restore_cache:
          key: test_result-{{ .Revision }}-SQS
      - restore_cache:
          key: test_result-{{ .Revision }}-Textract
      - restore_cache:
          key: test_result-{{ .Revision }}-Transcribe
      - restore_cache:
          key: test_result-{{ .Revision }}-TranscribeStreaming
      - restore_cache:
          key: test_result-{{ .Revision }}-Translate
      - store_artifacts:
          path: integration_test_result

  integrationtest:
    description: Run integration tests
    parameters:
      groupname:
        default: stable_testList
        type: string
    macos:
      xcode: "12.0.0"
    steps:
      - set_environment_variables
      - skip_job_unless_required
      - early_return_for_forked_prs
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - skip_test_job
      - pre_start_simulator
      - restore_cache:
          key: testing_derived_data-{{ .Revision }}
      - run:
          name: Install JSON parser
          command: pip3 install demjson
      - run :
          name: Run integration tests
          command: |
            mkdir integration_test_result
            python3 CircleciScripts/run_integrationtests.py CircleciScripts/IntegrationTestsConfiguration.json "integration_test_result" "<< parameters.groupname >>" "${destination}" "./testing_derived_data"
      - run:
          name : Check integration test result
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ]
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi
      - store_artifacts:
          path: integration_test_result
      - save_cache:
          key: test_result-{{ .Revision }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - integration_test_result

  release_tag:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - update_brew
      - run:
          name: Install github-release
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install github-release
      - run:
          name: Release the tag to GitHub
          command: |
            tagdescription=$(sed -n '/## '${CIRCLE_TAG}'/,/## [0-9]*\.[0-9]*\.[0-9]/p' CHANGELOG.md | sed '1d' | sed '$d')
            tagname="AWS SDK for iOS "${CIRCLE_TAG}
            echo "$tagdescription" | github-release release -s ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} --name "$tagname" -d -

  build_carthage:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - pre_start_simulator
      - update_brew
      - run:
          name: Upgrade Carthage
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade carthage
      - run:
          name: Build Carthage
          command: |
            # Build Carthage via this script to workaround lipo error due to multiple architectures in same file
            bash ./CircleciScripts/carthage-build.sh --no-skip-current --platform iOS | tee buildout.txt
          no_output_timeout: 100m
      - save_cache:
          key: carthage_build_result-{{ .Revision }}
          paths:
            - Carthage

  release_carthage:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - pre_start_simulator
      - update_brew
      - run:
          name: Install github-release
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install github-release
      - run:
          name: Upgrade Carthage
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade carthage
      - restore_cache:
          key: carthage_build_result-{{ .Revision }}
      - run:
          name: Create Carthage archive
          command: python3 ./CircleciScripts/create_carthage_archive.py
          no_output_timeout: 20m
      - run:
          name: Upload Carthage archive to GitHub release
          command: github-release upload -s ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -f aws-sdk-ios-carthage.framework.zip -n aws-sdk-ios-carthage.framework.zip

  release_cocoapods:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          # Note that this invocation of cocoapods_release requires at least
          # CocoaPods 1.9.3, and cocoalpods-trunk 1.5.0, since it uses the
          # `--synchronous` flag. CocoaPods 1.9.3 comes with the 12.0.0 Xcode
          # image, but just to be safe, we'll manually update cocoapods-trunk
          name: Update cocoapods-trunk to support --synchronous flag
          command: gem update cocoapods-trunk
      - run:
          name: Release CocoaPods
          command: python3 ./CircleciScripts/cocoapods_release.py
          no_output_timeout: 20m

  release_docs:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Install jazzy
          command: |
            sudo gem install jazzy --source http://rubygems.org
      - run:
          name: Generate documents
          command: bash ./CircleciScripts/generate_documentation.sh
      - run:
          name: Copy documents
          command: |
            git config --local user.name "AWS"
            git checkout gh-pages
            rm -rf docs/reference
            mv docs_tmp docs/reference
      - run:
          name: Checkin documents
          command: |
            for dirPath in docs/reference/* ; do
              sdkName=$( basename "$dirPath" )
              git add "$dirPath" && git commit -m "Update API documentation for ${sdkName} ${CIRCLE_TAG}"
              git prune
            done
            git push -q https://${GITHUB_TOKEN}@github.com/aws/aws-sdk-ios.git

  add_doc_tag:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Add documentation tags to gh-pages
          command: |
            git config --local user.name "AWS"
            git checkout gh-pages
            git tag -a ${CIRCLE_TAG}_api_docs -m "Add documentation tags to version ${CIRCLE_TAG}"
            git push --tags -q https://${GITHUB_TOKEN}@github.com/aws-amplify/aws-sdk-ios.git

  bump_ios_sampleapp_version:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - set_environment_variables
      - quit_for_nominorversion
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Checkout repository for bump version
          command: |
            SAMPLE_APPS_REPO_ACCOUNT=awslabs
            echo "export SAMPLE_APPS_REPO_ACCOUNT=$SAMPLE_APPS_REPO_ACCOUNT" >> $BASH_ENV
            git clone "https://github.com/${SAMPLE_APPS_REPO_ACCOUNT}/aws-sdk-ios-samples.git"
      - run:
          name: Update version
          command:
            python3 CircleciScripts/bump_iossample_version.py "$(pwd)/aws-sdk-ios-samples" $release_version
      - run:
          name: Build projects
          command:
            python3 CircleciScripts/build_iossample.py "$(pwd)/aws-sdk-ios-samples"
      - run:
          name: Stage changes
          command: |
            cd aws-sdk-ios-samples
            git config --local user.name "AWS"
            gitstatus=$(git status)
            echo $gitstatus
            if [[ $gitstatus == *"Changes not staged for commit:"* ]]; then
              git add .
            else
              echo "No changes for sample application bump version"
              circleci step halt
            fi
      - run:
          name: Check in changes
          command: |
            cd aws-sdk-ios-samples
            git status
            git config --local user.name "AWS"
            git commit -m "Update sample app dependency to ${release_version}"
            git push -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${SAMPLE_APPS_REPO_ACCOUNT}/aws-sdk-ios-samples.git
  release_ios_s3:
    macos:
      xcode: "12.0.0"
    environment:
      TERM: xterm-256color
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - update_brew
      - set_environment_variables
      - configure_aws
      - restore_cache:
          key: carthage_build_result-{{ .Revision }}
      - run:
          name: Make directory structure
          command: |
            mkdir -p "$sdkNameWithVersion"
            mv "Carthage/Build/iOS" "$sdkNameWithVersion/frameworks"
            rm -rf "Carthage/Build"
      - run:
          name: Copy SDK resource files
          command: |
            python3 CircleciScripts/copy_resourcefiles.py "$(pwd)" "$(pwd)/$sdkNameWithVersion"
      - run:
          name: Zip SDK folder
          command: |
            zip -r "$sdkNameWithVersion.zip" "$sdkNameWithVersion"
      - run:
          name: Copy zip file
          command: |
            mkdir -p sdkfiles
            cp "$sdkNameWithVersion.zip" "sdkfiles/$sdkNameWithVersion.zip"
      - store_artifacts:
          path: sdkfiles
      - run:
          name: Upload to S3
          command: |
            aws s3api put-object --bucket "$release_bucket" --key "$sdkNameWithVersion.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read --profile sdk_s3_release
            aws s3api put-object --bucket "$release_bucket" --key "latest/$sdkName.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read --profile sdk_s3_release
      - run:
          name: Invalidate cloudfront
          command: |
            python3 CircleciScripts/cloudfront_invalidate.py sdk_s3_release "${S3_RELEASE_DISTRIBUTION_ID}" "latest/$sdkName.zip"

  bump_sdk_version:
    macos:
      xcode: "12.0.0"
    steps:
      - skip_job_unless_required
      - set_environment_variables
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Install JSON parser
          command: sudo pip3 install demjson
      - run:
          name: Install lxml
          command: sudo pip3 install lxml
      - run:
          name: Set environment variables
          command: |
            git config --local user.name AWS

            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            echo "commitmessage=$commitmessage"
            if [[ "$commitmessage" != *"bump version"* ]]
            then
               echo "To bump sdk version, the commit message should contain the words 'bump version'"
               circleci step halt
            fi

            release_version=$(head version | grep -E "^[0-9]+.[0-9]+.[0-9]+" | sed "s/^\([0-9]*.[0-9]*.[0-9]*\).*/\1/")
            if [ -z "release_version" ]
            then
              echo "version file does not have a correct version number"
              exit 1
            fi
            echo "release_version=[$release_version]"
            bumpversion_repo_user=${CIRCLE_PROJECT_USERNAME}
            bumpversion_repo_name=${CIRCLE_PROJECT_REPONAME}
            echo "bumpversion_repo_user:$bumpversion_repo_user"
            echo "bumpversion_repo_name:$bumpversion_repo_name"

            bump_version_message="[bump version $release_version]"
            bump_version_pr_title="bump iOS sdk version to ${release_version}"
            target_branch=develop
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export release_version=$release_version" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "export target_branch='${target_branch}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: Bump SDK version
          command: |
            cp -R ${bumpversion_repo_name}/CircleciScripts/ CircleciScripts/
            python3 CircleciScripts/bump_sdk_version.py "$(pwd)/${bumpversion_repo_name}" $release_version
      - bump_version_post

  merge_to_main:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - set_environment_variables
      - run:
          name: Merge change to main
          command: |
            git config --local user.name AWS
            git checkout main
            git fetch origin
            git reset origin/main
            git checkout .
            git clean -fd .
            commitlog=$(git log main -20)
            currentcommit="${CIRCLE_SHA1}"
            echo "currentcommit=$currentcommit"
            echo "$commitlog"
            if [[ "$commitlog" =~ .*"commit $currentcommit".* ]]
            then
               echo "The change is already merged"
            else
              echo "Merging change from develop to main"
              currentcommit="${CIRCLE_SHA1}"
              lastcommitmessage=$(git log --format=%B -n 1 ${currentcommit})

              git merge develop --no-edit --commit -m "[Merge develop to main by circleci] $lastcommitmessage"
              echo "push change"
              git push -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            fi

  prepare_release_sdk:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_unless_required
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - set_environment_variables
      - run:
          name: Trigger release_sdk if current commit is a bump version
          command: |
            bash CircleciScripts/prepare_release_sdk.sh

  create_pullrequest_for_modelupdate:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_unless_required
      - set_environment_variables
      - restore_cache:
          keys:
            - v1-source-{{ .Revision }}
      - checkout
      - run:
          name: Create pull request
          command: |
            target_branch="develop"
            title=${CIRCLE_BRANCH}
            content="${CIRCLE_BRANCH}"
            python3 ./CircleciScripts/create_pullrequest.py "${GITHUB_USER}" "${GITHUB_TOKEN}" "$title" "$content" "$target_branch" "${CIRCLE_PROJECT_USERNAME}:${CIRCLE_BRANCH}" ${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME}

workflows:
  version: 2

  bump_sdk_version:
    jobs:
      - bump_sdk_version:
          filters:
            branches:
              only:
                - bump_sdk_version
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore: bump_sdk_version
      - build_test_host_apps:
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSAPIGateway
          name: unit_test_AWSAPIGateway
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSAutoScaling
          name: unit_test_AWSAutoScaling
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSCloudWatch
          name: unit_test_AWSCloudWatch
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSCognitoAuth
          name: unit_test_AWSCognitoAuth
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSCognitoIdentityProvider
          name: unit_test_AWSCognitoIdentityProvider
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSCognito
          name: unit_test_AWSCognito
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSComprehend
          name: unit_test_AWSComprehend
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSConnect
          name: unit_test_AWSConnect
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSConnectParticipant
          name: unit_test_AWSConnectParticipant
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSCore
          name: unit_test_AWSCore
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSDynamoDB
          name: unit_test_AWSDynamoDB
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSEC2
          name: unit_test_AWSEC2
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSElasticLoadBalancing
          name: unit_test_AWSElasticLoadBalancing
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSIoT
          name: unit_test_AWSIoT
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSKMS
          name: unit_test_AWSKMS
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSKinesis
          name: unit_test_AWSKinesis
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSKinesisVideo
          name: unit_test_AWSKinesisVideo
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSKinesisVideoArchivedMedia
          name: unit_test_AWSKinesisVideoArchivedMedia
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSKinesisVideoSignaling
          name: unit_test_AWSKinesisVideoSignaling
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSLambda
          name: unit_test_AWSLambda
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSLex
          name: unit_test_AWSLex
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSLogs
          name: unit_test_AWSLogs
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSMachineLearning
          name: unit_test_AWSMachineLearning
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSMobileAnalytics
          name: unit_test_AWSMobileAnalytics
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          project: AWSAuthSDK/AWSAuthSDK.xcodeproj
          scheme: AWSMobileClient
          name: unit_test_AWSMobileClient
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSPinpoint
          name: unit_test_AWSPinpoint
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSPolly
          name: unit_test_AWSPolly
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSRekognition
          name: unit_test_AWSRekognition
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSS3
          name: unit_test_AWSS3
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSSES
          name: unit_test_AWSSES
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSSNS
          name: unit_test_AWSSNS
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSSQS
          name: unit_test_AWSSQS
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSSageMakerRuntime
          name: unit_test_AWSSageMakerRuntime
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSSimpleDB
          name: unit_test_AWSSimpleDB
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSTranscribe
          name: unit_test_AWSTranscribe
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSTranscribeStreaming
          name: unit_test_AWSTranscribeStreaming
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version
      - unit_test:
          scheme: AWSTranslate
          name: unit_test_AWSTranslate
          requires:
            - build
            - build_test_host_apps
          filters:
            branches:
              ignore: bump_sdk_version

      - create_pullrequest_for_modelupdate:
          filters:
            branches:
              only:
                - /^models-update-.+$/
      - pre_integrationtest:
          filters:
            branches:
              only:
                # REMOVE BEFORE MERGING
                # - palpatim/parallelize-unit-tests
                - main
                - develop

      - integrationtest:
          name: AutoScaling
          groupname: AutoScaling
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                # REMOVE BEFORE MERGING
                # - palpatim/parallelize-unit-tests
                - main
                - develop

      - integrationtest:
          name: AWSMobileClient
          groupname: AWSMobileClient
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                # REMOVE BEFORE MERGING
                # - palpatim/parallelize-unit-tests
                - main
                - develop

      - integrationtest:
          name: CloudWatch
          groupname: CloudWatch
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                # REMOVE BEFORE MERGING
                # - palpatim/parallelize-unit-tests
                - main
                - develop

      - integrationtest:
          name: Cognito
          groupname: Cognito
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Comprehend
          groupname: Comprehend
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Core
          groupname: Core
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: DynamoDB
          groupname: DynamoDB
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: EC2
          groupname: EC2
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: ElasticLoadBalancing
          groupname: ElasticLoadBalancing
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: IoT
          groupname: IoT
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Kinesis
          groupname: Kinesis
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: KinesisVideoSignaling
          groupname: KinesisVideoSignaling
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: KMS
          groupname: KMS
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Lambda
          groupname: Lambda
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Lex
          groupname: Lex
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: MobileAnalytics
          groupname: MobileAnalytics
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Pinpoint
          groupname: Pinpoint
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Polly
          groupname: Polly
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Rekognition
          groupname: Rekognition
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: S3
          groupname: S3
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: SES
          groupname: SES
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: SNS
          groupname: SNS
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: SQS
          groupname: SQS
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Transcribe
          groupname: Transcribe
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: TranscribeStreaming
          groupname: TranscribeStreaming
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Translate
          groupname: Translate
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - integrationtest:
          name: Textract
          groupname: Textract
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - main
                - develop

      - post_integrationtest:
          requires:
            - AWSMobileClient
            - AutoScaling
            - CloudWatch
            - Cognito
            - Comprehend
            - Core
            - DynamoDB
            - EC2
            - ElasticLoadBalancing
            - IoT
            - KMS
            - Kinesis
            - KinesisVideoSignaling
            - Lambda
            - Lex
            - MobileAnalytics
            - Pinpoint
            - Polly
            - Rekognition
            - S3
            - SES
            - SNS
            - SQS
            - Textract
            - Transcribe
            - TranscribeStreaming
            - Translate
          filters:
            branches:
              only:
                - main
                - develop

      - merge_to_main:
          requires:
            - build
            - post_integrationtest
          filters:
            branches:
              only:
                - develop
      - prepare_release_sdk:
          requires:
            - build
            - post_integrationtest
          filters:
            branches:
              only:
                - main

  release_sdk:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - pre_integrationtest:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: AWSMobileClient
          groupname: AWSMobileClient
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: SQS
          groupname: SQS
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: MobileAnalytics
          groupname: MobileAnalytics
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Rekognition
          groupname: Rekognition
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: SES
          groupname: SES
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: SNS
          groupname: SNS
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: CloudWatch
          groupname: CloudWatch
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: AutoScaling
          groupname: AutoScaling
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Translate
          groupname: Translate
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Transcribe
          groupname: Transcribe
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: TranscribeStreaming
          groupname: TranscribeStreaming
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Polly
          groupname: Polly
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Cognito
          groupname: Cognito
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Comprehend
          groupname: Comprehend
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Core
          groupname: Core
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Kinesis
          groupname: Kinesis
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: KinesisVideoSignaling
          groupname: KinesisVideoSignaling
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: KMS
          groupname: KMS
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: ElasticLoadBalancing
          groupname: ElasticLoadBalancing
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: EC2
          groupname: EC2
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Lambda
          groupname: Lambda
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Lex
          groupname: Lex
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: IoT
          groupname: IoT
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Pinpoint
          groupname: Pinpoint
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: S3
          groupname: S3
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: DynamoDB
          groupname: DynamoDB
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Textract
          groupname: Textract
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - post_integrationtest:
          requires:
            - AWSMobileClient
            - AutoScaling
            - CloudWatch
            - Cognito
            - Comprehend
            - Core
            - DynamoDB
            - EC2
            - ElasticLoadBalancing
            - IoT
            - KMS
            - Kinesis
            - KinesisVideoSignaling
            - Lambda
            - Lex
            - MobileAnalytics
            - Pinpoint
            - Polly
            - Rekognition
            - S3
            - SES
            - SNS
            - SQS
            - Textract
            - Transcribe
            - TranscribeStreaming
            - Translate
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - build_carthage:
          requires:
            - post_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - release_ios_s3:
          requires:
            - build_carthage
            - post_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - release_tag:
          requires:
            - post_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - release_docs:
          requires:
            - release_tag
            - release_ios_s3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - add_doc_tag:
          requires:
            - release_docs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - release_cocoapods:
          requires:
            - add_doc_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - release_carthage:
          requires:
            - build_carthage
            - add_doc_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
      - bump_ios_sampleapp_version:
          requires:
            - release_tag
            - release_ios_s3
            - release_cocoapods
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+.[0-9]+.[0-9]+$/
